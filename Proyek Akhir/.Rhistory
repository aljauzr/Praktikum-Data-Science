tabPanel("Bar Plot", plotOutput("barplot")), #tab berupa barplotarplot
tabPanel("Word Cloud", plotOutput("Wordcloud")) #tab berupa worldcloud
)
)
)
library(shiny)
library(here)
library(vroom)
library(tm)
library(RTextTools)
library(dplyr)
library(ggplot2)
library(plotly)
library(syuzhet)
library(e1071)
library(caret)
library(wordcloud)
data <- vroom::vroom(here::here("kepin", "train.csv"))
reviewdota2 = data %>% filter(data$title == "Dota 2" & data$year >= 2011 & data$year <= 2018)
rstats <- reviewdota2$user_review
travel_corpus <- Corpus(VectorSource(rstats)) #Mengubah teks menjadi urutan token
data_clean <- tm_map(travel_corpus, removePunctuation) #menghilangkan tandabaca
data_clean <- tm_map(data_clean, content_transformer(tolower)) #menghilangkan kapital
data_clean <- tm_map(data_clean, removeNumbers) #menghilangkan angka
removeURL <- function(removeURL) gsub("http.*", "", removeURL)
data_clean <- tm_map(data_clean, removeURL) #menghilangkan url
removeNL <- function(y) gsub("\n", " ", y)
data_clean <- tm_map(data_clean, removeNL)
data_clean <- tm_map(data_clean, removeWords, c("game","dota", "get", "play", "many", "also", "much", "people", "make", "still", "cant", "every", "youre", "ive", "one", "games", "lol", "ing", "thing", "lot", "playing", "players", "played", "player", "valve", "time", "way", "time", "dont", "since", "really", "want", "know", "look", "thats", "give", "take", "getting"))
removeEmoticon <- function(removeEmoticon) gsub("[^\x01-\x7F]", "", removeEmoticon)
data_clean <- tm_map(data_clean, removeEmoticon) #menghilangkan emoticon
stopwords <- scan(paste(getwd(), "/stopwords.txt", sep=""), character(), sep="\n")
data_clean <- tm_map(data_clean,removeWords,stopwords) #menghilangkan stopwords
data_clean_df<-data.frame(text=unlist(sapply(data_clean, `[`)), stringsAsFactors=F)
data_clean_df = mutate(data_clean_df, user_suggestion = reviewdota2$user_suggestion)
klasifikasi = ifelse(data_clean_df$user_suggestion == 1, "Positif", "Negatif")
data_clean_df = mutate(data_clean_df, klasifikasi)
write.csv(data_clean_df,file = 'reviewclean.csv')
reviewclean <- read.csv("reviewclean.csv", stringsAsFactors = FALSE)
komentar <- as.character(reviewclean$text) #mengubah objek numerik menjadi objek karakter
s <- get_nrc_sentiment(komentar)
komentar_gabungan <- cbind(reviewclean$text,s)
par(mar = c(4,4,4,4))
a <- barplot(colSums(s), col=rainbow(10), main='Analisis Sentimen')
brplt <- a
df <- read.csv("reviewclean.csv", stringsAsFactors = FALSE)
glimpse(df)
set.seed(20)
df <- df[sample(nrow(df)),]
df <- df[sample(nrow(df)),]
glimpse(df)
corpus <- Corpus(VectorSource(df$text))
corpus
inspect(corpus[1:10])
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10, 1:20])
df.train <- df[1:203,]
df.test <- df[204:405,]
dtm.train <- dtm[1:200,]
dtm.test <- dtm[201:400,]
corpus.clean.train <- corpus.clean[1:200]
corpus.clean.test <- corpus.clean[201:400]
dim(dtm.train)
fivefreq <- findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb <- DocumentTermMatrix(corpus.clean.train,control=list(dictionary=fivefreq))
dtm.test.nb <- DocumentTermMatrix(corpus.clean.test,control=list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y <- ifelse(x>0,1,0)
y <- factor(y, levels=c(0,1), labels=c("no","yes"))
y
}
trainNB <- apply(dtm.train.nb,2,convert_count)
testNB <- apply(dtm.test.nb,1,convert_count)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, cex=1.5, "Word Cloud")
wordcloud(corpus.clean,max.words = 100,random.order=F,colors=brewer.pal(8,"Dark2"))
reviewclean <- read.csv(file="reviewclean.csv",header=TRUE)
komentar <- reviewclean$text
ui <- fluidPage(
titlePanel("Analisis Sentimen terhadap Ulasan Game Dota 2 pada Platform Steam Tahun 2011-218"), #Judul
mainPanel(
#tab pada fluidpage
#plot output : untuk barplot
tabsetPanel(type = "tabs",
tabPanel("Data Ulasan", DT::dataTableOutput('tbl')), #tab berupa data clening reviewclean
tabPanel("Bar Plot", plotOutput("barplot")), #tab berupa barplotarplot
tabPanel("Word Cloud", plotOutput("Wordcloud")) #tab berupa worldcloud
)
)
)
# SERVER
# Disinialah tempat dimana data akan dianalisis dan diproses lalu hasilnya akan ditampilkan atau diplotkan pada bagian mainpanel() ui yang telah dijelaskan sebelumnya.
server <- function(input, output) {
# Output Data
output$tbl = DT::renderDataTable({
DT::datatable(reviewclean, options = list(lengthChange = FALSE)) # data akan ditampilkan dalam beberapa halaman.
})
#Barplot
output$barplot <- renderPlot({reviewclean<-read.csv("reviewclean.csv",stringsAsFactors = FALSE)
komentar <-as.character(reviewclean$text)
s<-get_nrc_sentiment(komentar)
review_combine<-cbind(reviewclean$text,s)
par(mar=c(4,4,4,4))
barplot(colSums(s),col=rainbow(10),ylab='Jumlah Kata',xlab = "Jenis Sentiment", main='Sentiment Analysis')
}, height=400)
#WordCloud
output$Wordcloud <- renderPlot({
glimpse(df)
set.seed(20)
df <- df[sample(nrow(df)),]
df <- df[sample(nrow(df)),]
glimpse(df)
corpus <- Corpus(VectorSource(df$text))
corpus
inspect(corpus[1:10])
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10, 1:20])
df.train <- df[1:50,]
df.test <- df[51:100,]
dtm.train <- dtm[1:50,]
dtm.test <- dtm[51:100,]
corpus.clean.train <- corpus.clean[1:50]
corpus.clean.test <- corpus.clean[51:100]
dim(dtm.train)
fivefreq <- findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb <- DocumentTermMatrix(corpus.clean.train,control=list(dictionary=fivefreq))
dtm.test.nb <- DocumentTermMatrix(corpus.clean.test,control=list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y <- ifelse(x>0,1,0)
y <- factor(y, levels=c(0,1), labels=c("no","yes"))
y
}
trainNB <- apply(dtm.train.nb,2,convert_count)
testNB <- apply(dtm.test.nb,1,convert_count)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, cex=1.5, "Word Cloud")
wordcloud(corpus.clean,max.words = 100,random.order=F,colors=brewer.pal(8,"Dark2"))
})
}
shinyApp(ui = ui, server = server)
data <- vroom::vroom(here::here("kepin", "train.csv"))
reviewdota2 = data %>% filter(data$title == "Dota 2" & data$year >= 2011 & data$year <= 2018)
rstats <- reviewdota2$user_review
travel_corpus <- Corpus(VectorSource(rstats)) #Mengubah teks menjadi urutan token
data_clean <- tm_map(travel_corpus, removePunctuation) #menghilangkan tandabaca
replacePunctuation = function(replacePunctuation) gsub("[[:punct:]]", " ", x) #mengganti tanda baca dengan spasi
data_clean <- tm_map(data_clean, replacePunctuation)
data <- vroom::vroom(here::here("kepin", "train.csv"))
reviewdota2 = data %>% filter(data$title == "Dota 2" & data$year >= 2011 & data$year <= 2018)
rstats <- reviewdota2$user_review
travel_corpus <- Corpus(VectorSource(rstats)) #Mengubah teks menjadi urutan token
data_clean <- tm_map(travel_corpus, removePunctuation) #menghilangkan tandabaca
replacePunctuation = function(replacePunctuation) gsub("[[:punct:]]", " ", data_clean) #mengganti tanda baca dengan spasi
data_clean <- tm_map(data_clean, replacePunctuation)
data_clean <- tm_map(data_clean, content_transformer(tolower)) #menghilangkan kapital
data_clean <- tm_map(data_clean, removeNumbers) #menghilangkan angka
removeURL <- function(removeURL) gsub("http.*", "", removeURL)
data_clean <- tm_map(data_clean, removeURL) #menghilangkan url
removeNL <- function(y) gsub("\n", " ", y)
data_clean <- tm_map(data_clean, removeNL)
data_clean <- tm_map(data_clean, removeWords, c("game","dota", "get", "play", "many", "also", "much", "people", "make", "still", "cant", "every", "youre", "ive", "one", "games", "lol", "ing", "thing", "lot", "playing", "players", "played", "player", "valve", "time", "way", "time", "dont", "since", "really", "want", "know", "look", "thats", "give", "take", "getting", "im", "op"))
removeEmoticon <- function(removeEmoticon) gsub("[^\x01-\x7F]", "", removeEmoticon)
data_clean <- tm_map(data_clean, removeEmoticon) #menghilangkan emoticon
stopwords <- scan(paste(getwd(), "/stopwords.txt", sep=""), character(), sep="\n")
data_clean <- tm_map(data_clean,removeWords,stopwords) #menghilangkan stopwords
data_clean_df<-data.frame(text=unlist(sapply(data_clean, `[`)), stringsAsFactors=F)
data_clean_df = mutate(data_clean_df, user_suggestion = reviewdota2$user_suggestion)
View(data_clean_df)
data <- vroom::vroom(here::here("kepin", "train.csv"))
reviewdota2 = data %>% filter(data$title == "Dota 2" & data$year >= 2011 & data$year <= 2018)
rstats <- reviewdota2$user_review
travel_corpus <- Corpus(VectorSource(rstats))
data_clean <- tm_map(travel_corpus, removePunctuation) #menghilangkan tandabaca
data_clean <- tm_map(data_clean, content_transformer(tolower)) #menghilangkan kapital
data_clean <- tm_map(data_clean, removeNumbers) #menghilangkan angka
removeURL <- function(removeURL) gsub("http.*", "", removeURL)
data_clean <- tm_map(data_clean, removeURL) #menghilangkan url
removeNL <- function(y) gsub("\n", " ", y)
data_clean <- tm_map(data_clean, removeNL)
data_clean <- tm_map(data_clean, removeWords, c("game","dota", "get", "play", "many", "also", "much", "people", "make", "still", "cant", "every", "youre", "ive", "one", "games", "lol", "ing", "thing", "lot", "playing", "players", "played", "player", "valve", "time", "way", "time", "dont", "since", "really", "want", "know", "look", "thats", "give", "take", "getting", "im", "op"))
removeEmoticon <- function(removeEmoticon) gsub("[^\x01-\x7F]", "", removeEmoticon)
data_clean <- tm_map(data_clean, removeEmoticon) #menghilangkan emoticon
stopwords <- scan(paste(getwd(), "/stopwords.txt", sep=""), character(), sep="\n")
data_clean <- tm_map(data_clean,removeWords,stopwords) #menghilangkan stopwords
data_clean_df<-data.frame(text=unlist(sapply(data_clean, `[`)), stringsAsFactors=F)
data_clean_df = mutate(data_clean_df, user_suggestion = reviewdota2$user_suggestion)
klasifikasi = ifelse(data_clean_df$user_suggestion == 1, "Positif", "Negatif")
data_clean_df = mutate(data_clean_df, klasifikasi)
write.csv(data_clean_df,file = 'reviewclean.csv')
reviewclean <- read.csv("reviewclean.csv", stringsAsFactors = FALSE)
komentar <- as.character(reviewclean$text) #mengubah objek numerik menjadi objek karakter
s <- get_nrc_sentiment(komentar)
komentar_gabungan <- cbind(reviewclean$text,s)
par(mar = c(4,4,4,4))
a <- barplot(colSums(s), col=rainbow(10), main='Analisis Sentimen')
brplt <- a
df <- read.csv("reviewclean.csv", stringsAsFactors = FALSE)
glimpse(df)
set.seed(20)
df <- df[sample(nrow(df)),]
df <- df[sample(nrow(df)),]
glimpse(df)
corpus <- Corpus(VectorSource(df$text))
corpus
inspect(corpus[1:10])
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10, 1:20])
df.train <- df[1:203,]
df.test <- df[204:405,]
dtm.train <- dtm[1:200,]
dtm.test <- dtm[201:400,]
corpus.clean.train <- corpus.clean[1:200]
corpus.clean.test <- corpus.clean[201:400]
dim(dtm.train)
fivefreq <- findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb <- DocumentTermMatrix(corpus.clean.train,control=list(dictionary=fivefreq))
dtm.test.nb <- DocumentTermMatrix(corpus.clean.test,control=list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y <- ifelse(x>0,1,0)
y <- factor(y, levels=c(0,1), labels=c("no","yes"))
y
}
trainNB <- apply(dtm.train.nb,2,convert_count)
testNB <- apply(dtm.test.nb,1,convert_count)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, cex=1.5, "Word Cloud")
wordcloud(corpus.clean,max.words = 100,random.order=F,colors=brewer.pal(8,"Dark2"))
reviewclean <- read.csv(file="reviewclean.csv",header=TRUE)
komentar <- reviewclean$text
ui <- fluidPage(
titlePanel("Analisis Sentimen terhadap Ulasan Game Dota 2 pada Platform Steam Tahun 2011-218"), #Judul
mainPanel(
#tab pada fluidpage
#plot output : untuk barplot
tabsetPanel(type = "tabs",
tabPanel("Data Ulasan", DT::dataTableOutput('tbl')), #tab berupa data clening reviewclean
tabPanel("Bar Plot", plotOutput("barplot")), #tab berupa barplotarplot
tabPanel("Word Cloud", plotOutput("Wordcloud")) #tab berupa worldcloud
)
)
)
# SERVER
# Disinialah tempat dimana data akan dianalisis dan diproses lalu hasilnya akan ditampilkan atau diplotkan pada bagian mainpanel() ui yang telah dijelaskan sebelumnya.
server <- function(input, output) {
# Output Data
output$tbl = DT::renderDataTable({
DT::datatable(reviewclean, options = list(lengthChange = FALSE)) # data akan ditampilkan dalam beberapa halaman.
})
#Barplot
output$barplot <- renderPlot({reviewclean<-read.csv("reviewclean.csv",stringsAsFactors = FALSE)
komentar <-as.character(reviewclean$text)
s<-get_nrc_sentiment(komentar)
review_combine<-cbind(reviewclean$text,s)
par(mar=c(4,4,4,4))
barplot(colSums(s),col=rainbow(10),ylab='Jumlah Kata',xlab = "Jenis Sentiment", main='Sentiment Analysis')
}, height=400)
#WordCloud
output$Wordcloud <- renderPlot({
glimpse(df)
set.seed(20)
df <- df[sample(nrow(df)),]
df <- df[sample(nrow(df)),]
glimpse(df)
corpus <- Corpus(VectorSource(df$text))
corpus
inspect(corpus[1:10])
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10, 1:20])
df.train <- df[1:50,]
df.test <- df[51:100,]
dtm.train <- dtm[1:50,]
dtm.test <- dtm[51:100,]
corpus.clean.train <- corpus.clean[1:50]
corpus.clean.test <- corpus.clean[51:100]
dim(dtm.train)
fivefreq <- findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb <- DocumentTermMatrix(corpus.clean.train,control=list(dictionary=fivefreq))
dtm.test.nb <- DocumentTermMatrix(corpus.clean.test,control=list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y <- ifelse(x>0,1,0)
y <- factor(y, levels=c(0,1), labels=c("no","yes"))
y
}
trainNB <- apply(dtm.train.nb,2,convert_count)
testNB <- apply(dtm.test.nb,1,convert_count)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, cex=1.5, "Word Cloud")
wordcloud(corpus.clean,max.words = 100,random.order=F,colors=brewer.pal(8,"Dark2"))
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
diamonds
?diamonds
str(diamonds)
qplot(x = carat, y = price, colour = clarity, data = diamonds)
ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = clarity)) +
geom_point()
plot_diamonds <- ggplot() +
geom_point(data = diamonds, mapping = aes(x = carat, y = price, colour = clarity)) # Saat output disimpan ke dalam obyek R, grafik tidak otomatis dicetak pada layar
plot_diamonds # Untuk mencetak grafik, Anda harus menjalankan nama obyek R yang sebelumnya dibuat
ggsave(filename = "diamonds.png", plot = plot_diamonds)
?aes
?geom_point
library(vroom)
library(here)
un_smp <- vroom(here("data-raw", "un_smp.csv"))
un_smp <- vroom(here("praktikum2020-master", "data-raw", "un_smp.csv"))
un_smp
length(un_smp)
names(un_smp)
unique(un_smp$tahun)
ggplot(un_smp)
ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika))
ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika)) +
geom_point()
ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika)) +
geom_point(aes(colour = status))
ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika)) +
geom_point(aes(colour = status, size = jumlah_peserta))
ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika)) +
geom_point(aes(colour = status, size = jumlah_peserta), alpha = 0.2)
ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika)) +
geom_point(aes(colour = status, size = jumlah_peserta), alpha = 0.2) +
facet_wrap(~tahun, scales = "free")
mtk_vs_ind = ggplot(un_smp, aes(x = bahasa_indonesia, y = matematika)) +
geom_point(aes(colour = status, size = jumlah_peserta), alpha = 0.2) +
facet_wrap(~tahun, scales = "free") +
labs(
x = "Bahasa Indonesia",
y = "Matematika",
colour = "Status sekolah",
size = "# peserta",
title = "Wew",
subtitle = "Ujian Nasional SMP di Kota Bandung 2015-2019",
caption = "Sumber: Open Data Kota Bandung"
) +
theme_light()
mtk_vs_ind
ggsave("mtk_vs_ind.png", plot = mtk_vs_ind)
?hist
View(data_clean_df)
positif = data_clean_df %>% select(klasifikasi) %>% filter(klasifikasi == "Positif")
negatif = data_clean_df %>% select(klasifikasi) %>% filter(klasifikasi == "Negatif")
histogram(data_clean_df, col, xlab = positif, ylab = negatif, main = "Positif vs Negatif" )
positif = data_clean_df %>% select(klasifikasi) %>% filter(klasifikasi == "Positif")
positif = as.character(positif)
negatif = data_clean_df %>% select(klasifikasi) %>% filter(klasifikasi == "Negatif")
negatif = as.character(negatif)
histogram(data_clean_df, col, xlab = positif, ylab = negatif, main = "Positif vs Negatif" )
ggplot(data_clean_df, aes(klasifikasi)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
ggplot(data_clean_df, aes(klasifikasi)) +
+     geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(klasifikasi))
+     geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(klasifikasi)) + geom_bar()
ggplot(data_clean_df, aes(klasifikasi)) + geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(klasifikasi)) + geom_bar(fill = rainbow)
ggplot(data_clean_df, aes(klasifikasi)) + geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(Review = klasifikasi)) + geom_bar(fill = "#0073C2FF")
rlang::last_error()
?aes
ggplot(data_clean_df$klasifikasi, aes(x = Review)) + geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(x = review, y = frekuensi, klasifikasi)) + geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(x = data_clean_df$klasifikasi)) + geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(klasifikasi)) + geom_bar(fill = "#0073C2FF")
ggplot(data_clean_df, aes(klasifikasi, main = "Positif vs Negatif")) + geom_bar(fill = "#0073C2FF")
positifvsnegatif = ggplot(data_clean_df, aes(klasifikasi, main = "Positif vs Negatif")) + geom_bar(fill = "#0073C2FF")
positifvsnegatif
reviewclean <- read.csv(file="reviewclean.csv",header=TRUE)
komentar <- reviewclean$text
ui <- fluidPage(
titlePanel("Analisis Sentimen terhadap Ulasan Game Dota 2 pada Platform Steam Tahun 2011-218"), #Judul
mainPanel(
#tab pada fluidpage
#plot output : untuk barplot
tabsetPanel(type = "tabs",
tabPanel("Data Ulasan", DT::dataTableOutput('tbl')), #tab berupa data clening reviewclean
tabPanel("Bar Plot", plotOutput("barplot")), #tab berupa barplotarplot
tabPanel("Word Cloud", plotOutput("Wordcloud")), #tab berupa worldcloud
tabPanel("Positif vs Negatif", plotOutput("ggplot")) #tab berupa ggplot
)
)
)
# SERVER
# Disinialah tempat dimana data akan dianalisis dan diproses lalu hasilnya akan ditampilkan atau diplotkan pada bagian mainpanel() ui yang telah dijelaskan sebelumnya.
server <- function(input, output) {
# Output Data
output$tbl = DT::renderDataTable({
DT::datatable(reviewclean, options = list(lengthChange = FALSE)) # data akan ditampilkan dalam beberapa halaman.
})
#Barplot
output$barplot <- renderPlot({reviewclean<-read.csv("reviewclean.csv",stringsAsFactors = FALSE)
komentar <-as.character(reviewclean$text)
s<-get_nrc_sentiment(komentar)
review_combine<-cbind(reviewclean$text,s)
par(mar=c(4,4,4,4))
barplot(colSums(s),col=rainbow(10),ylab='Jumlah Kata',xlab = "Jenis Sentiment", main='Sentiment Analysis')
}, height=400)
#WordCloud
output$Wordcloud <- renderPlot({
glimpse(df)
set.seed(20)
df <- df[sample(nrow(df)),]
df <- df[sample(nrow(df)),]
glimpse(df)
corpus <- Corpus(VectorSource(df$text))
corpus
inspect(corpus[1:10])
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10, 1:20])
df.train <- df[1:50,]
df.test <- df[51:100,]
dtm.train <- dtm[1:50,]
dtm.test <- dtm[51:100,]
corpus.clean.train <- corpus.clean[1:50]
corpus.clean.test <- corpus.clean[51:100]
dim(dtm.train)
fivefreq <- findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb <- DocumentTermMatrix(corpus.clean.train,control=list(dictionary=fivefreq))
dtm.test.nb <- DocumentTermMatrix(corpus.clean.test,control=list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y <- ifelse(x>0,1,0)
y <- factor(y, levels=c(0,1), labels=c("no","yes"))
y
}
trainNB <- apply(dtm.train.nb,2,convert_count)
testNB <- apply(dtm.test.nb,1,convert_count)
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, cex=1.5, "Word Cloud")
wordcloud(corpus.clean,max.words = 100,random.order=F,colors=brewer.pal(8,"Dark2"))
})
#GGPlot
output$ggplot <- renderPlot({reviewclean<-read.csv("reviewclean.csv",stringsAsFactors = FALSE)
positifvsnegatif = ggplot(reviewclean, aes(klasifikasi, main = "Positif vs Negatif")) + geom_bar(fill = "#0073C2FF")
positifvsnegatif
}, height=400)
}
shinyApp(ui = ui, server = server)
ggplot(reviewclean, aes(x = "", y = proportion, fill = klasifikasi)) +
geom_bar(width = 1, stat = "identity", color = "black") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = proportion), color = "black")+
scale_fill_manual(values = mycols) +
theme_void()
ggplot(reviewclean, aes(x = "", y = proportion, fill = klasifikasi)) +
geom_bar(width = 1, stat = "identity", color = "black") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = proportion), color = "black")+
scale_fill_manual(values = klasifikasi) +
theme_void()
ggplot(reviewclean, aes(fill = klasifikasi)) +
geom_bar(width = 1, stat = "identity", color = "black") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = proportion), color = "black")+
scale_fill_manual(values = klasifikasi) +
theme_void()
pie(reviewclean$klasifikasi)
pie(reviewclean(table))
pie(table(reviewclean$klasifikasi))
